<%= javascript_include_tag "plupload.full.min.js" %>
<%= javascript_include_tag "jquery.plupload.queue.min.js" %>
<%= stylesheet_link_tag "jquery.plupload.queue.css" %>
<%= stylesheet_link_tag  'gallery/cubeportfolio.min' %>
<%= javascript_include_tag 'gallery/jquery.cubeportfolio.min'%>
<%= stylesheet_link_tag "semantic.min" %>
<%= javascript_include_tag "semantic.min" %>
<div id="div-file-list">
  <div class="col-xs-12 col-md-12">
    <hr>
    <div id="direct_upload" class="basic_form">
      <h2 class="text-right">
        نحوه آپلود
      </h2>
      <div class="col-xs-12">
        <p>
          <span style="color:red">
            *
            حجم هر فایل حداکثر ۵ مگابایت می تواند باشد.
          </span>
          <br>
          اگر عکسی کیفیت خوبی ندارد، حتما ابتدا ادیت و سپس آپلود شود.
          <br>
          ابتدا فایل های خود را اضافه نمایید سپس توسط دکمه شروع آپلود عکس ها را آپلود کنید.
        </p>
      </div>
    </div>
  </div>
  <div class="row">
    <hr>
    <div class="col-xs-12" id="filelist">
      <div id="uploader">
        <p>Your browser doesn't have Flash, Silverlight or HTML5 support.</p>
      </div>
    </div>
  </div>
</div>

<div class="col-xs-12" id="grid-container" style="padding-top: 5%;">
  <div id="js-grid-masonry" class="cbp">
    <% if object.shoot_location_attachments.present? %>
          <% object.shoot_location_attachments.each do |f| %>
                <div class="cbp-item identity" id="div-<%= f.id %>">
                  <a href='<%=f.photo_url(:medium)%>' class="cbp-caption cbp-lightbox" data-title="<%=f.shoot_location.title%>">
                    <div class="cbp-caption-defaultWrap">
                      <%= cl_image_tag(f.photo_url(:medium), :height => 300,:width=> 300, :crop => :fit, :quality => 50)%>
                    </div>
                    <div class="cbp-caption-activeWrap">
                      <div class="cbp-l-caption-alignCenter">
                        <div class="cbp-l-caption-body">
                          <div class="cbp-l-caption-title"> <%= f.id %>
                          </div>
                        </div>
                      </div>
                    </div>
                  </a>
                  <button id="remove-button-<%= f.id %>" class="btn btn-danger btn-block" type="button" name="button" onclick="remove_photo(<%= f.id %>,'/shoot_location_attachments/<%=f.id %>');">حذف</button>
                </div>
          <% end %>
    <% end %>
  </div>
</div>

<script type="text/javascript">
  $('#js-grid-masonry').cubeportfolio({
    filters: '#js-filters-masonry',
    layoutMode: 'grid',
    defaultFilter: '*',
    animationType: 'slideDelay',
    gapHorizontal: 20,
    gapVertical: 20,
    gridAdjustment: 'responsive',
    mediaQueries: [{
      width: 1500,
      cols: 5,
    }, {
      width: 1100,
      cols: 4,
    }, {
      width: 800,
      cols: 3,
    }, {
      width: 480,
      cols: 2,
      options: {
        caption: '',
        gapHorizontal: 3,
        gapVertical: 3,
      }
    }],
    caption: 'overlayBottomAlong',
    displayType: 'bottomToTop',
    displayTypeSpeed: 100,

    // lightbox
    lightboxDelegate: '.cbp-lightbox',
    lightboxGallery: true,
    lightboxTitleSrc: 'data-title',
    lightboxCounter: '<div class="cbp-popup-lightbox-counter">{{current}} of {{total}}</div>',
  });
  
  $(function() {

    $("#uploader").pluploadQueue({
      // General settings
      runtimes : 'html5,flash,silverlight,html4',
      url : '/shoot_location_attachments',
      chunk_size : '5mb',
      unique_names : true,


      filters : {
        max_file_size : '5mb',
        mime_types: [
        {title : "Image files", extensions : "jpg,jpeg"}
        ]
      },
      multipart_params : {
        <% if @shoot_location.present? %>
        "shoot_location_id" : <%= object.id %>,
        <% end %>
      },

      // Flash settings
      flash_swf_url : '/plupload/js/Moxie.swf',

      // Silverlight settings
      silverlight_xap_url : '/plupload/js/Moxie.xap',

      // PreInit events, bound before any internal events
      preinit : {
        Init: function(up, info) {
          log('[Init]', 'Info:', info, 'Features:', up.features);
        },

        UploadFile: function(up, file) {
          log('[UploadFile]', file);

          // You can override settings before the file is uploaded
          // up.setOption('url', 'upload.php?id=' + file.id);
          // up.setOption('multipart_params', {param1 : 'value1', param2 : 'value2'});
        }
      },

      // Post init events, bound after the internal events
      init : {
        PostInit: function() {
          // Called after initialization is finished and internal event handlers bound
          log('[PostInit]');

          // document.getElementById('uploadfiles').onclick = function() {
          //   uploader.start();
          //   return false;
          // };
        },

        Browse: function(up) {
          // Called when file picker is clicked
          log('[Browse]');
        },

        Refresh: function(up) {
          // Called when the position or dimensions of the picker change
          log('[Refresh]');
        },

        StateChanged: function(up) {
          // Called when the state of the queue is changed
          log('[StateChanged]', up.state == plupload.STARTED ? "STARTED" : "STOPPED");
        },

        QueueChanged: function(up) {
          // Called when queue is changed by adding or removing files
          log('[QueueChanged]');
        },

        OptionChanged: function(up, name, value, oldValue) {
          // Called when one of the configuration options is changed
          log('[OptionChanged]', 'Option Name: ', name, 'Value: ', value, 'Old Value: ', oldValue);
        },

        BeforeUpload: function(up, file) {
          // Called right before the upload for a given file starts, can be used to cancel it if required
          log('[BeforeUpload]', 'File: ', file);
        },

        UploadProgress: function(up, file) {
          // Called while file is being uploaded
          log('[UploadProgress]', 'File:', file, "Total:", up.total);
        },

        FileFiltered: function(up, file) {
          // Called when file successfully files all the filters
          log('[FileFiltered]', 'File:', file);
        },

        FilesAdded: function(up, files) {
          // Called when files are added to queue
          log('[FilesAdded]');

          plupload.each(files, function(file) {
            log('  File:', file);
          });
        },

        FilesRemoved: function(up, files) {
          // Called when files are removed from queue
          log('[FilesRemoved]');

          plupload.each(files, function(file) {
            log('  File:', file);
          });
        },

        FileUploaded: function(up, file, info) {
          // Called when file has finished uploading
          log('[FileUploaded] File:', file, "Info:", info);
        },

        ChunkUploaded: function(up, file, info) {
          // Called when file chunk has finished uploading
          log('[ChunkUploaded] File:', file, "Info:", info);
        },

        UploadComplete: function(up, files) {
          // Called when all files are either uploaded or failed
          log('[UploadComplete]');
        },

        Destroy: function(up) {
          // Called when uploader is destroyed
          log('[Destroy] ');
        },

        Error: function(up, args) {
          // Called when error occurs
          console.log(args.status);
          if (args.status == 406){
            alert("حجم فایل بیشتر از حد مجاز است.")
          }
          if (args.status == 401){
            alert("اگزیف عکس موجود نیست و یا اگزیف دارای سریال نامبر نمی باشد. لطفا عکس دارای اگزیف را آپلود کنید.")
          }
        }
      }
    });
    function log() {
      var str = "";

      plupload.each(arguments, function(arg) {
        var row = "";

        if (typeof(arg) != "string") {
          plupload.each(arg, function(value, key) {
            // Convert items in File objects to human readable form
            if (arg instanceof plupload.File) {
              // Convert status to human readable
              switch (value) {
                case plupload.QUEUED:
                value = 'QUEUED';
                break;

                case plupload.UPLOADING:
                value = 'UPLOADING';
                break;

                case plupload.FAILED:
                value = 'FAILED';
                break;

                case plupload.DONE:
                value = 'DONE';
                break;
              }
            }

            if (typeof(value) != "function") {
              row += (row ? ', ' : '') + key + '=' + value;
            }
          });

          str += row + " ";
        } else {
          str += arg + " ";
        }
      });

      var log = $('#log');
      log.append(str + "\n");
      // log.scrollTop(log[0].scrollHeight);
    }
  });
</script>
<script type="text/javascript">
  function remove_photo(id, url){
    console.log(url)
    $.ajax({
      data: {
        id: id,
      },
      dataType: 'json',
      async: false,
      success: function(){
        document.getElementById("remove-button-" + id).innerHTML = 'حذف شد !' ;
        document.getElementById("remove-button-" + id).classList.remove("btn-danger");
        document.getElementById("remove-button-" + id).classList.add("btn-gray");
        document.getElementById("remove-button-" + id).disabled = true
        document.getElementById("div-" + id).remove();
      },
      type: 'DELETE',
      url: url,
    })
  }
</script>
