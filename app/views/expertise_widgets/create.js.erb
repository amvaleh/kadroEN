
document.getElementById("new-widget-submit-button_" + <%=@old_counter%>).innerHTML = 'ثبت شد';
document.getElementById("new-widget-submit-button_" + <%=@old_counter%>).classList.remove("btn-primary");
document.getElementById("new-widget-submit-button_" + <%=@old_counter%>).classList.add("btn-gray");
document.getElementById("new-widget-submit-button_" + <%=@old_counter%>).disabled = true;
document.getElementById("widget_name_" + <%=@old_counter%>).disabled = true;
document.getElementById("show-div-filelist_" + <%=@old_counter%>).hidden = false;

$("#uploader_<%=@old_counter%>").pluploadQueue({
  // General settings
  runtimes : 'html5,flash,silverlight,html4',
  url : '/expertise_widget_attachments',
  chunk_size : '1mb',
  unique_names : true,


  filters : {
    max_file_size : '1mb',
    mime_types: [
    {title : "Image files", extensions : "jpg,jpeg"}
    ]
  },
  multipart_params : {
    "photographer_id"   : <%= @expertise.photographer.id %>,
    "expertise_widget_id" : <%= @expertise_widget.id %>
  },

  // Flash settings
  flash_swf_url : '/plupload/js/Moxie.swf',

  // Silverlight settings
  silverlight_xap_url : '/plupload/js/Moxie.xap',

  // PreInit events, bound before any internal events
  preinit : {
    Init: function(up, info) {
      log_<%=@old_counter%>('[Init]', 'Info:', info, 'Features:', up.features);
    },

    UploadFile: function(up, file) {
      log_<%=@old_counter%>('[UploadFile]', file);

      // You can override settings before the file is uploaded
      // up.setOption('url', 'upload.php?id=' + file.id);
      // up.setOption('multipart_params', {param1 : 'value1', param2 : 'value2'});
    }
  },

  // Post init events, bound after the internal events
  init : {
    PostInit: function() {
      // Called after initialization is finished and internal event handlers bound
      log_<%=@old_counter%>('[PostInit]');

      // document.getElementById('uploadfiles').onclick = function() {
      //   uploader.start();
      //   return false;
      // };
    },

    Browse: function(up) {
      // Called when file picker is clicked
      log_<%=@old_counter%>('[Browse]');
    },

    Refresh: function(up) {
      // Called when the position or dimensions of the picker change
      log_<%=@old_counter%>('[Refresh]');
    },

    StateChanged: function(up) {
      // Called when the state of the queue is changed
      log_<%=@old_counter%>('[StateChanged]', up.state == plupload.STARTED ? "STARTED" : "STOPPED");
    },

    QueueChanged: function(up) {
      // Called when queue is changed by adding or removing files
      log_<%=@old_counter%>('[QueueChanged]');
    },

    OptionChanged: function(up, name, value, oldValue) {
      // Called when one of the configuration options is changed
      log_<%=@old_counter%>('[OptionChanged]', 'Option Name: ', name, 'Value: ', value, 'Old Value: ', oldValue);
    },

    BeforeUpload: function(up, file) {
      // Called right before the upload for a given file starts, can be used to cancel it if required
      log_<%=@old_counter%>('[BeforeUpload]', 'File: ', file);
    },

    UploadProgress: function(up, file) {
      // Called while file is being uploaded
      log_<%=@old_counter%>('[UploadProgress]', 'File:', file, "Total:", up.total);
    },

    FileFiltered: function(up, file) {
      // Called when file successfully files all the filters
      log_<%=@old_counter%>('[FileFiltered]', 'File:', file);
    },

    FilesAdded: function(up, files) {
      // Called when files are added to queue
      log_<%=@old_counter%>('[FilesAdded]');

      plupload.each(files, function(file) {
        log_<%=@old_counter%>('  File:', file);
      });
    },

    FilesRemoved: function(up, files) {
      // Called when files are removed from queue
      log_<%=@old_counter%>('[FilesRemoved]');

      plupload.each(files, function(file) {
        log_<%=@old_counter%>('  File:', file);
      });
    },

    FileUploaded: function(up, file, info) {
      // Called when file has finished uploading
      log_<%=@old_counter%>('[FileUploaded] File:', file, "Info:", info);
      document.getElementById("filelist_<%=@old_counter%>").remove();
      document.getElementById("show-div-filelist-button_<%= @old_counter%>").classList.remove("btn-success");
      document.getElementById("show-div-filelist-button_<%= @old_counter%>").classList.add("btn-gray");
      document.getElementById("show-div-filelist-button_<%= @old_counter%>").innerHTML = "تصاویر افزوده شد !";
      document.getElementById("show-div-filelist-button_<%= @old_counter%>").disabled = true;
    },

    ChunkUploaded: function(up, file, info) {
      // Called when file chunk has finished uploading
      log_<%=@old_counter%>('[ChunkUploaded] File:', file, "Info:", info);
    },

    UploadComplete: function(up, files) {
      // Called when all files are either uploaded or failed
      log_<%=@old_counter%>('[UploadComplete]');
    },

    Destroy: function(up) {
      // Called when uploader is destroyed
      log_<%=@old_counter%>('[Destroy] ');
    },

    Error: function(up, args) {
      // Called when error occurs
      console.log(args.status);
      if (args.status == 406){
        alert("حجم فایل بیشتر از حد مجاز است.")
      }
      if (args.status == 401){
        alert("اگزیف عکس موجود نیست و یا اگزیف دارای سریال نامبر نمی باشد. لطفا عکس دارای اگزیف را آپلود کنید.")
      }
    }
  }
});

function log_<%=@old_counter%>() {
  var str = "";

  plupload.each(arguments, function(arg) {
    var row = "";

    if (typeof(arg) != "string") {
      plupload.each(arg, function(value, key) {
        // Convert items in File objects to human readable form
        if (arg instanceof plupload.File) {
          // Convert status to human readable
          switch (value) {
            case plupload.QUEUED:
            value = 'QUEUED';
            break;

            case plupload.UPLOADING:
            value = 'UPLOADING';
            break;

            case plupload.FAILED:
            value = 'FAILED';
            break;

            case plupload.DONE:
            value = 'DONE';
            break;
          }
        }

        if (typeof(value) != "function") {
          row += (row ? ', ' : '') + key + '=' + value;
        }
      });

      str += row + " ";
    } else {
      str += arg + " ";
    }
  });

  var log = $('#log');
  log.append(str + "\n");
  // log.scrollTop(log[0].scrollHeight);
}

jQuery(function($) {
  $('#form-input').append(`<%=render partial: '/expertise_widgets/form' , :locals => {:expertise => @expertise, :counter => @counter}%>`);
});
