<head>
    <% if Rails.env.production? %>
      <%= render 'shared/externals/gtag_header' %>
      <%= render 'shared/externals/ganalytics' %>
  <% end %>
    <title>
        Edit Shoot Type
    </title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <META NAME="ROBOTS" CONTENT="INDEX, FOLLOW">
  
    
    <link rel="icon" type="image/png" href="/img/shootempire.png">
    <meta name="theme-color" content="RGB(41, 135, 249)" />
  
    <%= csrf_meta_tags %>
   
    <%= csrf_meta_tags %>
    <%= stylesheet_link_tag 'wordpress', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'wordpress', 'data-turbolinks-track': 'reload' %>
    <%= stylesheet_link_tag "semantic.min" %>
    <%= javascript_include_tag "semantic.min" %>
    <%= javascript_include_tag "plupload.full.min.js" %>
    <%= javascript_include_tag "jquery.plupload.queue.min" %>
    <%= stylesheet_link_tag "jquery.plupload.queue" %>
  </head> 

  
  <body>
    <section class="container">
      <div class="row">
          <div class="col-12 col-sm-10 mx-auto">
            <h1>
              <%=@shoot_type.title%>
            </h1>
          </div>
      </div>
    </section>
  
    <section class="container">
      <div class="row" style="margin-bottom: 30px;">
        <div class="col-12 col-sm-8 mx-auto">
          <div id="uploader">
            <p>Your browser doesn't have Flash, Silverlight or HTML5 support.</p>
          </div>
        </div>
        <div class="col-12 col-sm-8 mx-auto my-2">
          <p>
            <a style="font-size:10px" href="<%=edit_expertise_photographer_url(current_photographer, expertise_id: current_photographer.expertises.find_by(shoot_type_id: @shoot_type.id).id , shoot_type_id:@shoot_type.id  )%>"> reload the page to see new uploaded files </a>
          </p>
          <div class="row justify-content-center align-items-center">
          <% @expertise.photos.each do |photo| %>
            <div class="col-4 p-1">
              <%= link_to  photo.file_url , target: "_blank" do %>
                <img src="<%=photo.file_url(:medium)%>" alt="" class="img-fluid">
              <% end %>
            </div>
          <% end %>
          </div>

        </div>
      </div>
    </section>
    <%= render "types/sections/mobile_footer"%>
  </body>
  
  
  <script>
      $("#uploader").pluploadQueue({
          // General settings
          runtimes : 'html5,flash,silverlight,html4',
          url : '<%= receive_photo_expertise_path %>',
          chunk_size : '500mb',
          unique_names : true,
          filters : {
            max_file_size : '5mb',
            mime_types: [
            {title : "Image files", extensions : "jpg,jpeg,png"},
            ]
          },
          multipart_params : {
            "shoot_type_id" : "<%= @expertise.shoot_type.id %>",
            "photographer_id"   : "<%= @photographer.id %>"
          },

          // Flash settings
          flash_swf_url : '/plupload/js/Moxie.swf',

          // Silverlight settings
          silverlight_xap_url : '/plupload/js/Moxie.xap',

          // PreInit events, bound before any internal events
          preinit : {
            Init: function(up, info) {
              log('[Init]', 'Info:', info, 'Features:', up.features);
            },

            UploadFile: function(up, file) {
              log('[UploadFile]', file);

              // You can override settings before the file is uploaded
              // up.setOption('url', 'upload.php?id=' + file.id);
              // up.setOption('multipart_params', {param1 : 'value1', param2 : 'value2'});
            }
          },

          // Post init events, bound after the internal events
          init : {
            PostInit: function() {
              // Called after initialization is finished and internal event handlers bound
              log('[PostInit]');

              // document.getElementById('uploadfiles').onclick = function() {
              //   uploader.start();
              //   return false;
              // };
            },

            Browse: function(up) {
              // Called when file picker is clicked
              log('[Browse]');
            },

            Refresh: function(up) {
              // Called when the position or dimensions of the picker change
              log('[Refresh]');
            },

            StateChanged: function(up) {
              // Called when the state of the queue is changed
              log('[StateChanged]', up.state == plupload.STARTED ? "STARTED" : "STOPPED");
            },

            QueueChanged: function(up) {
              // Called when queue is changed by adding or removing files
              log('[QueueChanged]');
            },

            OptionChanged: function(up, name, value, oldValue) {
              // Called when one of the configuration options is changed
              log('[OptionChanged]', 'Option Name: ', name, 'Value: ', value, 'Old Value: ', oldValue);
            },

            BeforeUpload: function(up, file) {
              // Called right before the upload for a given file starts, can be used to cancel it if required
              log('[BeforeUpload]', 'File: ', file);
            },

            UploadProgress: function(up, file) {
              // Called while file is being uploaded
              log('[UploadProgress]', 'File:', file, "Total:", up.total);
            },

            FileFiltered: function(up, file) {
              // Called when file successfully files all the filters
              log('[FileFiltered]', 'File:', file);
            },

            FilesAdded: function(up, files) {
              // Called when files are added to queue
              log('[FilesAdded]');

              plupload.each(files, function(file) {
                log('  File:', file);
              });
            },

            FilesRemoved: function(up, files) {
              // Called when files are removed from queue
              log('[FilesRemoved]');

              plupload.each(files, function(file) {
                log('  File:', file);
              });
            },

            FileUploaded: function(up, file, info) {
              // Called when file has finished uploading
              log('[FileUploaded] File:', file, "Info:", info);
            },

            ChunkUploaded: function(up, file, info) {
              // Called when file chunk has finished uploading
              log('[ChunkUploaded] File:', file, "Info:", info);
            },

            UploadComplete: function(up, files) {
              // Called when all files are either uploaded or failed
              log('[UploadComplete]');
            },

            Destroy: function(up) {
              // Called when uploader is destroyed
              log('[Destroy] ');
            },

            Error: function(up, args) {
              // Called when error occurs
              console.log(args.status);
              if (args.status == 406){
                alert("File is too large")
              }
              if (args.status == 401){
                alert("Please upload image with exif.")
              }
            }
          }
        });
        function log() {
          var str = "";

          plupload.each(arguments, function(arg) {
            var row = "";

            if (typeof(arg) != "string") {
              plupload.each(arg, function(value, key) {
                // Convert items in File objects to human readable form
                if (arg instanceof plupload.File) {
                  // Convert status to human readable
                  switch (value) {
                    case plupload.QUEUED:
                    value = 'QUEUED';
                    break;

                    case plupload.UPLOADING:
                    value = 'UPLOADING';
                    break;

                    case plupload.FAILED:
                    value = 'FAILED';
                    break;

                    case plupload.DONE:
                    value = 'DONE';
                    break;
                  }
                }

                if (typeof(value) != "function") {
                  row += (row ? ', ' : '') + key + '=' + value;
                }
              });

              str += row + " ";
            } else {
              str += arg + " ";
            }
          });

          var log = $('#log');
          log.append(str + "\n");
          // log.scrollTop(log[0].scrollHeight);
        }
  </script>