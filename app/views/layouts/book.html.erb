<!DOCTYPE html>
<html>
<head>
  <% if Rails.env.production? %>
  <%= render 'shared/externals/yandex' %>
  <%= render 'shared/externals/addthis' %>
  <%= render 'shared/externals/raychat' %>
    <%#= render 'shared/externals/whatsapp' %>
  <%= render 'shared/yektanet_header' %>
  <% end %>
  <%= render 'shared/externals/gtag_header' %>
  <%= render 'shared/externals/ganalytics' %>
  <title>
    رزرو عکاس حرفه ای | کادرو
  </title>
  <meta charset="UTF-8">
  <meta name="description" content="رزرو آنلاین عکاس حرفه ای، برای هر زمان و هر مکان یک عکاس حرفه ای انتخاب و رزرو کنید، عکاسی کنید، لذت ببرید.">
  <meta name="keywords" content="رزرو, قیمت ,عکاسی ,پرتره, ,کودک ,بارداری, محصول, صنعتی,رویداد,آتلیه ,ارزان">
  <meta name="author" content="تیم کادرو">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <META NAME="ROBOTS" CONTENT="INDEX, FOLLOW">
  <meta name="theme-color" content="RGB(41, 135, 249)" />

  <%= csrf_meta_tags %>
    <%= stylesheet_link_tag    'book', media: 'all', 'data-turbolinks-track': 'reload' %>
    <script type="text/javascript"  src='https://maps.google.com/maps/api/js?key=AIzaSyBqAlo6eTQeSbkOn3xYIjJ4e1zr4ewrSxU&sensor=false&libraries=places&language=fa&region=IR'></script>
    <%#=<script src='https://api.cedarmaps.com/cedarmaps.js/v1.8.0/cedarmaps.js'></script>
    <link href='https://api.cedarmaps.com/cedarmaps.js/v1.8.0/cedarmaps.css' rel='stylesheet' />%>
    <%= javascript_include_tag 'book'%>
    <link rel="icon" type="image/png" href="/img/favicon.png">
  </head>

  <%= yield %>
  <script>
    var exited =false;

    if (window.history && window.history.pushState) {

      window.history.pushState('', null, null);

      $(window).on('popstate', function() {
        if(!exited)
        {
          window.history.pushState('', null, null);
          if(confirmExit())
          {

            exited=true;
            window.history.back();
            window.history.back();

          }
        }
      });

    }
    function mapPopupCallBack(latLng,title){
      reactMapPopupCallBack(latLng,title);
    }
    function generateRandomNumberBetween(x,y){
      let between = y -x +1;
      return Math.floor(Math.random() * between) + x;
    }
    function makeDottedNumber(num){
      return num.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1.");
    }
    function toPersianNumber(num){
      if(num != undefined)
      {
        const persianDigits = "۰۱۲۳۴۵۶۷۸۹";
        const persianMap = persianDigits.split("");
        return num.toString().replace(/\d/g, function (m) {
          return persianMap[parseInt(m)];
        });
      }
      else
      return '';

    }
    String.prototype.toEnglishDigits = function () {
      var id = { '۰': '0', '۱': '1', '۲': '2', '۳': '3', '۴': '4', '۵': '5', '۶': '6', '۷': '7', '۸': '8', '۹': '9' };
      return this.replace(/[^0-9.]/g, function (w) {
        return id[w] || w;
      });
    };
    function confirmExit(event){
      let result = confirm("اطلاعات وارد شده پاک میشوند. آیا ادامه میدهید؟");
      if (!result) {
        event.preventDefault();
      }
      return result;
    }
    var neshanMap;
    var neshanMarker;
    var neshanCircle;
    var mobileDisplay = (window.innerWidth<970);
    var myIcon = L.icon({
      iconUrl: 'https://www.kadro.co/kadroMapMarker.png',
      iconSize: [46, 46],

    });
    var studioIcon = L.icon({
      iconUrl: 'https://www.kadro.co/img/studio-logo.png',
      iconSize: [46, 46],

    });
    var locationIcon = L.icon({
      iconUrl: 'http://www.kadro.co/img/park-location.png',
      iconSize: [46, 46],

    });
    var mapCanvas={};
    var mapObject={};
    var service={};
    const neshanMapInitialize = (lat,lng) =>{
      mapObject = new google.maps.Map(document.getElementById('map-canvas'));

      service = new google.maps.places.PlacesService(mapObject);

      neshanMap = new L.Map('map', {
        key: 'web.2M27zXdjareLTDP2FNaKoy3pdHdXoi0r43yD0MXb',
        maptype: 'neshan',
        poi: true,
        traffic: false,
        center: [lat, lng],
        zoom: 14,
        fullscreenControl: true,
      });
      L.Circle.include({
          contains: function (latLng,title) {
            return this.getLatLng().distanceTo(latLng)-150 < this.getRadius();
          }
      });
      neshanCircle=L.circle([lat, lng], 2000).addTo(neshanMap);
      neshanMarker= L.marker([lat, lng], {
        icon: myIcon,
        draggable: true
      }).addTo(neshanMap);
    }

    // See the note below on how to get an access token
    //L.cedarmaps.accessToken = '0daf062f36f09174ab23a8520554620c424c3650';

    // Getting maps info from a tileJSON source
    //var tileJSONUrl = 'https://api.cedarmaps.com/v1/tiles/cedarmaps.streets.json?access_token=' + L.cedarmaps.accessToken;

    // initilizing map into div#map
    /*var cedarMap ;
    var cedarMarker;
    var cedarCircle;
    const cedarMapInitialize = () =>{

    cedarMap = L.cedarmaps.map('map', tileJSONUrl, {
    scrollWheelZoom: true,
    maxZoom: 16,
    minZoom: 13,
  });

}*/
/*var circle;
const myMap = () =>{
let mapCanvas = document.getElementById("map");
let mapOptions = { zoom: 11, gestureHandling: 'greedy',disableDefaultUI: true,zoomControl: true, mapTypeControl: false, scaleControl: false, streetViewControl: false, rotateControl: false, fullscreenControl: true};
let map = new google.maps.Map(mapCanvas, mapOptions);
let geocoder = new google.maps.Geocoder;
let marker;
geocoder.geocode({'address': "Tehran, Tehran Province"}, function(results, status) {
if (status === 'OK') {
map.setCenter(results[0].geometry.location);
marker = new google.maps.Marker({
map: map,
draggable: true,
animation: google.maps.Animation.DROP,
position: results[0].geometry.location,
icon: "https://www.kadro.co/kadroMapMarker.png",
gestureHandling: "greedy",
disableDefaultUI: true,
zoomControl: true,
mapTypeControl: false,
scaleControl: false,
streetViewControl: false,
rotateControl: false,
fullscreenControl: true
});
circle = new google.maps.Circle({
map: map,
radius: 2000,
fillColor: '#1F6FFF'
});
circle.bindTo('center', marker, 'position');
$('#latt').val( results[0].geometry.location.lat).trigger('change');
$('#long').val( results[0].geometry.location.lng).trigger('change');
map.addListener('center_changed', function() {

marker.setPosition(map.getCenter());
$('#latt').val(marker.getPosition().lat()).trigger('change');
$('#long').val(marker.getPosition().lng()).trigger('change');

});
} else {
alert('Geocode was not successful for the following reason: ' + status);
}
});

///////////////
let options = {
types: ['address'],
componentRestrictions: {country: 'ir'}
};



let autoComplete= new google.maps.places.Autocomplete(locationInput,options);
autoComplete.bindTo('bounds', map);
autoComplete.addListener('place_changed', function() {
let place = autoComplete.getPlace();
if (!place.geometry) {
// User entered the name of a Place that was not suggested and
// pressed the Enter key, or the Place Details request failed.
window.alert("آدرس مورد انتخابی شما نا معتبر است");
return;
}
if (place.geometry.viewport) {
map.fitBounds(place.geometry.viewport);
}
else{
map.setCenter(place.geometry.location);
map.setZoom(15);
}
marker.setPosition(place.geometry.location);
$('#latt').val(marker.getPosition().lat()).trigger('change');
$('#long').val(marker.getPosition().lng()).trigger('change');
setLocationName(marker.getPosition().lat(),marker.getPosition().lng());
});
//////////////////////////////////////////
}*/
/*function setLocationName(lat,lng)
{
let geocoder = new google.maps.Geocoder;
let latlng = {
lat: lat,
lng: lng
};
geocoder.geocode({
'location': latlng
}, function(results, status) {
if (status === 'OK') {
if (results[0]) {
//This is yout formatted address
$('#location').val(results[0].formatted_address).trigger('change');
}
else {
console.log('No results found');
}
}
else {
console.log('Geocoder failed due to: ' + status);
}
});
}*/
/*const getUserLocation = () =>{
if (navigator.geolocation)
{
navigator.geolocation.getCurrentPosition(getPosition,locationNotFound);
}
else {
console.log("Geolocation is not supported by this browser.");
}
}
const getLocationFromIP = () =>{
$.get("https://api.ipgeolocation.io/ipgeo?apiKey=c88a473d5562485c91b9645b27e8b871", (response) => {
let ipPosition={
coords: {latitude:parseFloat(response.latitude),longitude:parseFloat(response.longitude)},
};
getPosition(ipPosition);
});

}*/
/*
function locationNotFound(){
console.log('location Not Found');
}
function updateRadiusAroundMarker(radius){
circle.setRadius(radius);
}
function getPosition(position) {
let clientPosition = {
lat: position.coords.latitude,
lng: position.coords.longitude
};
let mapCanvas = document.getElementById("map");
let myCenter=new google.maps.LatLng(clientPosition);
let mapOptions = {center: myCenter, zoom: 15,disableDefaultUI: true,zoomControl: true, mapTypeControl: false, scaleControl: false, streetViewControl: false, rotateControl: false, fullscreenControl: true};
let map = new google.maps.Map(mapCanvas, mapOptions);
let geocoder = new google.maps.Geocoder;
let marker = new google.maps.Marker({
map: map,
draggable: true,
animation: google.maps.Animation.DROP,
position: clientPosition,
icon: "https://www.kadro.co/kadroMapMarker.png",
gestureHandling: "greedy",
disableDefaultUI: true,
zoomControl: true,
mapTypeControl: false,
scaleControl: false,
streetViewControl: false,
rotateControl: false,
fullscreenControl: true
});
circle = new google.maps.Circle({
map: map,
radius: 2000,
fillColor: '#1F6FFF'
});
circle.bindTo('center', marker, 'position');
$('#latt').val( clientPosition.lat).trigger('change');
$('#long').val( clientPosition.lng).trigger('change');
//setLocationName(clientPosition.lat,clientPosition.lng);
map.addListener('center_changed', function() {
// Do something with the positions here
// once the user has finished dragging the marker
marker.setPosition(map.getCenter());
$('#latt').val(marker.getPosition().lat()).trigger('change');
$('#long').val(marker.getPosition().lng()).trigger('change');
//console.log('jquery'+$('#latt').val());
//console.log('jquery'+$('#long').val());
//setLocationName(marker.getPosition().lat(),marker.getPosition().lng());
});
}
*/
function datePicker(){
  var pd = new persianDate();
  var figure = $('#time-picker').find('figure');
  //
  $('#date-picker').persianDatepicker({
    alwaysShow    : true,
    startDate     : pd.now().toString("YYYY/MM/DD"),
    endDate       : pd.now().addYear(10).toString("YYYY/MM/DD"),
    formatDate: "YYYY-0M-0D",
    persianNumbers: 1,
    prevArrow        : '\u25ba',
    nextArrow        : '\u25c4',
    cellHeight    : 65,
    fontSize      : 15,
    onSelect      : function () {
      // console.log("clicked");
      // var date = $('#time-picker').find('header').data('gdate');
      var date = $('#time-picker').find('header').attr('data-gdate');
      //       console.log("date that will be changed"+date);
      //     var parsDate = pd.parse(date);
      //      console.log("pars date that will be changed"+parsDate);
      //      console.log(parsDate.toString("YYYY/NM/DD"));
      $('#date_field').val(date).trigger('change');
      //$('#time').val('');
      //$('button').prop('disabled', true);
      //                $('#continue').removeClass('disabled');
    }
  });
}
/////convert Persian Digits to Latin Digits
var persianNumbers = [/۰/g, /۱/g, /۲/g, /۳/g, /۴/g, /۵/g, /۶/g, /۷/g, /۸/g, /۹/g]
function convertPersianDigitsToLatin(str)
{
  if(typeof str === 'string')
  {
    for(var i=0; i<10; i++)
    {
      str = str.replace(persianNumbers[i], i);
    }
  }
  return str;
}

var reservedCount=0;
function intializeReservedCount(){
  reservedCount=generateRandomNumberBetween(3,10);
  $('#reservedCount').html(toPersianNumber(parseInt(reservedCount)));
  return reservedCount;
}
var timeout = '';
var clock = '';
var minutes;
var secs ;
var currentSeconds;
var currentMinutes;
var circle;
var half ;
function timer_interface(){
  //display clock
  function Decrement() {
    currentMinutes = Math.floor(secs / 60);
    currentSeconds = secs % 60;
    if(currentSeconds <= 9) currentSeconds = "0" + currentSeconds;
    secs--;
    if (currentMinutes >= 5) {
      circle += 0.6;
      $('#rotate').css('transform', 'rotate(' + circle + 'deg)');
    }
    else {
      $('#rotate').addClass('next-half');
      $('#rotate').css({
        'background-color': 'rgb(239, 241, 243)',
        'transform'       : 'rotate(' + half + 'deg)'
      });
      half += 0.6;
    }
    $("#timer").html(toPersianNumber(currentMinutes) + ":" + toPersianNumber(currentSeconds));

    /////after 3 seconds the reserved counts will be incremented
    if(secs==596)
    {
      reservedCount=reservedCount+1;
      $('#reservedCount').html(toPersianNumber(parseInt(reservedCount)));
    }
    // ///////////

    if(secs !== -1)
    timeout = setTimeout(Decrement,1000);

  }
  this.start = function(){
    minutes        = 10;
    secs           = minutes * 60;
    currentSeconds = 0;
    currentMinutes = 0;
    circle         = -360;
    half           = -360;
    clock = setTimeout(Decrement,1000);
    reservedCount = intializeReservedCount();
  }
  this.stop = function(){
    clearTimeout(clock);
    clearTimeout(timeout);
  }
}
{/*
  function finalMap() {
  let mapCanvas = document.getElementById("finalMap");
  let fltLat=parseFloat($('input#addressLat').val());
  let fltLng=parseFloat($('input#addressLng').val());
  //console.log("addressLat:"+fltLat);
  //console.log("addressLng:"+fltLng);
  let myCenter=new google.maps.LatLng(fltLat,fltLng);
  let mapOptions = {center: myCenter, zoom: 16};
  let map = new google.maps.Map(mapCanvas, mapOptions);
  let geocoder = new google.maps.Geocoder;
  marker = new google.maps.Marker({
  map: map,
  draggable: false,
  animation: google.maps.Animation.DROP,
  position: {lat: fltLat, lng: fltLng},
  icon: "https://www.kadro.co/kadroMapMarker.png"
});
}*/}
</script>
</html>
