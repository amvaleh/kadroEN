<head>
  <% if Rails.env.production? %>
    <%= render 'shared/externals/gtag_header' %>
    <%= render 'shared/externals/ganalytics' %>
<% end %>
  <title>
     apply for ShootEmpire 
  </title>
  <meta charset="UTF-8">
  <meta name="description" content="<%= t(:'general.home.seo.meta_description') %>">
  <meta name="keywords" content="<%= t(:'general.home.seo.meta_keywords') %>">
  <meta name="author" content="<%= t(:'general.home.seo.meta_author') %>">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <META NAME="ROBOTS" CONTENT="INDEX, FOLLOW">

  <link rel="icon" type="image/png" href="/img/shootempire.png">
  <meta name="theme-color" content="RGB(41, 135, 249)" />

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/intl-tel-input@18.2.1/build/css/intlTelInput.css">
  <script src="https://cdn.jsdelivr.net/npm/intl-tel-input@18.2.1/build/js/intlTelInput.min.js"></script>


  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "url": "https://shootempire.com",
      "logo": "https://shootempire.com/img/shootempire.png",
    }
  </script>

  <%= csrf_meta_tags %>
  <% if Rails.env.production? %>
    <%= stylesheet_link_tag 'wordpress', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'wordpress', 'data-turbolinks-track': 'reload' %>
  <% else %>
    <%= stylesheet_link_tag 'wordpress', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'wordpress', 'data-turbolinks-track': 'reload' %>
  <% end %>
</head>
<%= render "public/shared/wordpress_header" %>

<body>
  <section class="container">
    <div class="row">
      <div class="col-12">
        <h1>
          Join ShootEmpire 
        </h1>
      </div>
      <div class="col-12">
      <%= form_for(resource, as: resource_name, url: registration_path(resource_name) , html: {class: "form form-group"}) do |f| %>
        <input type="text" id="work_lat" name="photographer[working_lat]" style="display:none"  />
        <input type="text" id="work_long" name="photographer[working_long]" style="display:none" />
        <div class="row" style="margin-bottom: 30px;">
          <div class="col-12 col-sm-6 mx-auto">
            <div class="col-sm-12 my-1">
              <label for="name"></label>
              <!-- trying to run parsley on form submition -->
              <input class="form-control mytextbox" type="text" name="photographer[first_name]" id="first_name" placeholder="first name" required="">
            </div>
            <div class="col-sm-12 my-1">
              <label for="name"></label>
              <input class="form-control mytextbox" type="text" id="last_name" name="photographer[last_name]"  placeholder="last name" required="">
            </div>
            <div class="col-sm-12 my-1">
              <label for="email"></label>
              <input class="form-control" type="email" name="photographer[email]" id="email" placeholder="Email" required="">
            </div>
            <div class="col-sm-12 my-3">
              <label for="mobile_number"></label>
              mobile number:
              <input class="form-control" type="number"  name="photographer[mobile_number]" id="mobile_number" placeholder="mobile number" required="" data-parsley-pattern="(0|\+98)?([ ]|,|-|[()]){0,2}9[0|1|2|3|4|9]([ ]|,|-|[()]){0,2}(?:[0-9]([ ]|,|-|[()]){0,2}){8}" >
              <button id="btn" type="button">Validate</button>
              <span id="valid-msg" class="d-none">âœ“ Valid</span>
              <span id="error-msg" class="d-none"></span>
            </div>
            <div class="col-sm-12 my-1">
              <label for="email"></label>
              <input class="form-control" type="password" name="photographer[password]" id="password" placeholder="password" required="" autocomplete="new-password" >
            </div>
            <div class="col-sm-12 my-1">
              <button type="submit" class="btn btn-primary btn-block"> submit </button>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-12 col-sm-6 mx-auto text-center">
            <h3>
              already have an account ?
            </h3>
            <%= link_to "login", new_session_path(resource_name) , class: "btn-lg btn btn-default" %>
          </div>
        </div>
    <% end %>
  </div>
  </div>
</section>
</body>

<script>
  const input = document.querySelector("#mobile_number");
  const iti = window.intlTelInput(input,
    {
      autoInsertDialCode: true,
      separateDialCode: true,
      hiddenInput: "full_phone",
      utilsScript: "https://cdn.jsdelivr.net/npm/intl-tel-input@18.2.1/build/js/utils.js",
      initialCountry: "auto",
      geoIpLookup: function (callback) {
        fetch("https://ipapi.co/json")
          .then(function (res) { return res.json(); })
          .then(function (data) { callback(data.country_code); })
          .catch(function () { callback("us"); });
      }
    });
</script>

<script>
  const button = document.querySelector("#btn");
  const errorMsg = document.querySelector("#error-msg");
  const validMsg = document.querySelector("#valid-msg");

  // here, the index maps to the error code returned from getValidationError - see readme
  const errorMap = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];


  const reset = () => {
    input.classList.remove("error");
    errorMsg.innerHTML = "";
    errorMsg.classList.add("d-none");
    validMsg.classList.add("d-none");
  };

  // on click button: validate
  button.addEventListener('click', () => {
    reset();
    if (input.value.trim()) {
      if (iti.isPossibleNumber()) {
        validMsg.classList.remove("d-none");
      } else {
        input.classList.add("error");
        const errorCode = iti.getValidationError();
        errorMsg.innerHTML = errorMap[errorCode];
        errorMsg.classList.remove("d-none");
      }
    }
  });

  // on keyup / change flag: reset
  input.addEventListener('change', reset);
  input.addEventListener('keyup', reset);
</script>